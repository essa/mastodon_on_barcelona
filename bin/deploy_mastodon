#!/usr/bin/env ruby

require 'thor'
require 'json'
require 'aws-sdk'
require 'jbuilder'
require 'erb'
require 'yaml'
require './lib/mastodon_on_barcelona/cf_executor'
require './lib/mastodon_on_barcelona/stack/base'
require './lib/mastodon_on_barcelona/stack/db'
require './lib/mastodon_on_barcelona/stack/resources'

class Hash
  def deep_symbolize_keys
    self.each_with_object({}){|(k,v),memo| memo[k.to_s.to_sym]=(v.is_a?(Hash) ? v.deep_symbolize_keys : v)}
  end
end


include MastodonOnBarcelon

module HelperMethods
  def check_bcn
    json = `bcn api get /user`
    JSON.parse json
    true
  rescue
    STDERR.puts $!
    STDERR.puts "bcn doesn't work, install it and login to your barcelona"
    false
  end

  def check_aws_creadential
    cf_client.describe_stacks
    true
  rescue
    STDERR.puts $!
    STDERR.puts "can't access to AWS, set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY properly"
    false
  end

  def create_stack(stack_cls, config, network_attributes, resources)
    stack = stack_cls.new(config[:heritage_name], config, network_attributes, resources)
    json = JSON.parse(stack.target!)
    puts JSON.pretty_generate json
    executor = CFExecutor.new(stack, cf_client)
    executor.create_or_update
    wait_cf_stack(executor)
    resources.add executor.outputs
  end

  private

  def network_attributes(district_name)
    return @network_attributes if @network_attributes
    r = vpc_client.describe_vpcs(
      filters: [
        {
          name: "tag:barcelona",
          values: [district_name]
        },
      ]
    )
    raise "vpc for #{distrct_name} not found" unless r.first.vpcs.first
    vpc_id = r.first.vpcs.first.vpc_id

    r = vpc_client.describe_subnets(
      filters: [
        {
          name: "tag:barcelona",
          values: [district_name]
        },
        {
          name: "tag:Network",
          values: ["Private"]
        }

      ]
    )
    subnet_ids = r.first.subnets.map(&:subnet_id)
    subnet_cidrs = r.first.subnets.map(&:cidr_block)
    @network_attributes = {
      vpc_id: vpc_id,
      subnet_ids: subnet_ids,
      subnet_cidrs: subnet_cidrs
    }
  end

  def vpc_client
    @vpc_client ||= Aws::EC2::Client.new
  end

  def cf_client
    @cf_client ||= Aws::CloudFormation::Client.new
  end

  def wait_cf_stack(executor)
    while true
      sleep 10
      case executor.stack_status
      when "CREATE_COMPLETE"
        puts
        break
      when "UPDATE_COMPLETE"
        puts
        break
      when /_IN_PROGRESS/
        print "."
      else
        raise "Unexpected CF stack status #{executor.stack_status}"
      end
    end
  end

end


class Config
  def self.create(cli, options)
    new(cli).create(options)
  end

  def self.load(cli)
    new(cli).load
  end

  attr_reader :cli, :path, :values

  def initialize(cli)
    @cli = cli
    @path = 'config.yaml'
    @values = {}
  end

  def [](key)
    @values[:config][key]
  end

  def []=(key, value)
    @values[:config][key] = value
  end

  def create(options)
    if File::exists?(path)
      ans = cli.yes?('You already have configured once, existing config.yaml will be overwritten ok?')
      exit(1) unless ans
    end
    s = ERB.new(TEMPLATE).result(binding)
    File::open(path, 'w') do |f| 
      f.puts s
    end
    cli.say("config.yaml is created. This file is used by later subcommands. Please check and edit it if you think you need to")
  end

  def load
    @values = YAML::load(File::open(path).read).deep_symbolize_keys
    self
  rescue
    cli.say $!
    cli.say "can't load config.yaml. run config first"
    exit(1)
  end
  TEMPLATE =<<EOT
config:
  region: <%= options[:region] %>
  district_name: <%= options[:district_name] %>
  heritage_name: <%= options[:name] %>
  db:
    user: mastodon_admin
    password: <%= options[:db_password] %>
    allocated_storage: 5 # MB
    instance_class: db.t2.micro
    storage_type: gp2
    multi_az: false
  redis:
    cache_node_type: cache.t2.micro
    num_cache_nodes: 1

EOT
end

class Resources
  def self.load(cli)
    new(cli)
  end

  attr_reader :cli, :path, :values

  def initialize(cli)
    @cli = cli
    @path = 'resources.yaml'
    load
  end

  def load
    @values = YAML::load(File::open(path).read).deep_symbolize_keys
    self
  rescue Errno::ENOENT
    @values = {}
    self
  rescue
    cli.say $!.class
    cli.say $!
    cli.say "can't load #{path}"
    exit(1)
  end

  def add(h)
    p 345, @values, h
    @values.merge!(h)
  end

  def save
    p values, values.to_yaml
    File::open(path, 'w') do |f| 
      f.puts values.to_yaml
    end
  end
end

class CLI < Thor
  include HelperMethods

  desc 'check_env', 'check environt for this command'

  option :region
  option :name, required: true
  option :district_name, required: true
  option :db_password, required: true

  desc 'config', 'Configure for later process'
  def config
    check_env
    Config.create(self, options)
  end

  desc 'create_db', 'Create RDB instance and S3 buckets for media files'
  def create_db
    config = Config.load(self)
    resources = Resources.load(self)
    district_name = config[:district_name]
    create_stack(Stack::DB, config, network_attributes(district_name), resources)
    resources.save
  end

  desc 'execute_all', 'allocate all resources'
  def execute_all
    puts "start"
    puts "end of allocate_resources"
  end

  private
  def check_env
    say "checking environment... "
    ret = check_bcn && check_aws_creadential
    exit(1) unless ret
    say "OK"
  end
  def region
    options[:region]
  end

  def district_name
    options[:district_name]
  end
end

CLI.start(ARGV)
