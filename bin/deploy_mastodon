#!/usr/bin/env ruby

require 'thor'
require 'json'
require 'aws-sdk'
require 'jbuilder'
require 'erb'
require 'securerandom'

require './lib/mastodon_on_barcelona/config'
require './lib/mastodon_on_barcelona/resources'
require './lib/mastodon_on_barcelona/cf_executor'
require './lib/mastodon_on_barcelona/stack/base'
require './lib/mastodon_on_barcelona/stack/db'
require './lib/mastodon_on_barcelona/stack/resources'

class Hash
  def deep_symbolize_keys
    self.each_with_object({}){|(k,v),memo| memo[k.to_s.to_sym]=(v.is_a?(Hash) ? v.deep_symbolize_keys : v)}
  end
  def deep_stringify_keys
    self.each_with_object({}){|(k,v),memo| memo[k.to_s]=(v.is_a?(Hash) ? v.deep_symbolize_keys : v)}
  end
end


include MastodonOnBarcelon

module HelperMethods
  def cmd(cmdline)
    puts cmdline
    ret = system cmdline
    unless ret
      say("'#{cmdline[0..80]}...' failed")
      exit(1)
    end 
  end

  def check_bcn
    json = `bcn api get /user`
    JSON.parse json
    true
  rescue
    STDERR.puts $!
    STDERR.puts "bcn doesn't work, install it and login to your barcelona"
    false
  end

  def check_aws_creadential
    cf_client.describe_stacks
    true
  rescue
    STDERR.puts $!
    STDERR.puts "can't access to AWS, set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY properly"
    false
  end

  def create_stack(stack_cls, config, network_attributes, resources)
    stack = stack_cls.new(config[:heritage_name], config, network_attributes, resources)
    json = JSON.parse(stack.target!)
    puts JSON.pretty_generate json
    executor = CFExecutor.new(stack, cf_client)
    executor.create_or_update
    wait_cf_stack(executor)
    resources.add executor.outputs
  end

  def attach_repository_policy_to_district(config, resources)
    district_name = config[:district_name]
    resp = iam_client.list_roles
    role = resp.roles.select { |r| r.role_name.include?("barcelona-#{district_name}-ECSInstanceRole") }.first
    raise "Instance Role for #{district_name} not found" unless role
    iam_client.attach_role_policy(
      role_name: role.role_name,
      policy_arn: resources[:RepositoryPolicyArn],
    )
  end


  def checkout_mastodon(config)
    repository = config[:mastodon_source][:repository]
    branch = config[:mastodon_source][:branch]
    checkout_command = "git clone #{repository} && cd mastodon && git checkout #{branch}"
    cmd(checkout_command)
  end

  def build_and_push_docker_image(config, resources)
    repository_uri = get_repository_uri(resources[:RepositoryForMastodon])
    c = <<-EOC.split("\n").join(' &&')
      eval `aws ecr get-login`
      cd mastodon
      docker build . -t '#{repository_uri}:latest'
      docker push '#{repository_uri}:latest'
    EOC
    cmd(c)
  end

  def install_barcelona_yml(config, resources)
    from = "templates/barcelona.yml.erb"
    to = "mastodon/barcelona.yml"
    repository_uri = get_repository_uri(resources[:RepositoryForMastodon])
    params = {
      repository_uri: repository_uri,
      heritage_name: config[:heritage_name],
      certificate_arn: config[:certificate_arn],
      endpoint: config[:endpoint]
    }
    render_template(from, to, params)
  end

  def do_create_heritage(config, resources)
    # certificate_arn = config[:certificate_arn]
    # bcn endpoint create --district=#{district_name} --certificate-arn=#{certificate_arn} mstdn
    district_name = config[:district_name]
    c = <<-EOC.split("\n").join(' &&')
      cd mastodon
      bcn create --district=#{district_name} -e production
    EOC
    cmd(c)
  end

  def do_set_environment_variables(config, resources)
    envs = {
      REDIS_HOST: resources[:RedisEndPoint],
      REDIS_PORT: 6379,
      DB_HOST: resources[:DBEndPoint],
      DB_USER: config[:db][:user],
      DB_NAME: 'mstdn',
      DB_PORT: 5432,

      LOCAL_DOMAIN: config[:hostname],
      LOCAL_HTTPS: 'true',

      S3_ENABLED: true,
      S3_BUCKET: resources[:MediaBucket],
      S3_REGION: config[:region],
      S3_PROTOCOL: 'https',
      S3_HOSTNAME: "s3.amazonaws.com"
    }
    cmd 'cd mastodon && bcn env set -e production ' + envs.map { |k, v| "#{k}='#{v}'"}.join(' ')
  end

  def do_set_secret_environment_variables(config, resources)
    paperclip_secret = (resources[:PAPER_CLIP_SECRET] || SecureRandom.hex(64) )
    secret_key_base = (resources[:SECRET_KEY_BASE] || SecureRandom.hex(64) )
    otp_secret = (resources[:OTP_SECRET] || SecureRandom.hex(64) )
    secret_envs = {
      DB_PASS: config[:db][:password],
      PAPERCLIP_SECRET: paperclip_secret,
      SECRET_KEY_BASE: secret_key_base,
      OTP_SECRET: otp_secret,
      S3_AWS_ACCESS_KEY_ID: resources[:AwsAccessKeyId],
      S3_AWS_SECRET_ACCESS_KEY: resources[:AwsSecretAccessKey],
    }
    cmd 'cd mastodon && bcn env set -e production --secret ' + secret_envs.map { |k, v| "#{k}='#{v}'"}.join(' ')

    resources[:PAPER_CLIP_SECRET] = paperclip_secret
    resources[:SECRET_KEY_BASE] = secret_key_base
    resources[:OTP_SECRET] = otp_secret
  end

  private

  def network_attributes(district_name)
    return @network_attributes if @network_attributes
    r = vpc_client.describe_vpcs(
      filters: [
        {
          name: "tag:barcelona",
          values: [district_name]
        },
      ]
    )
    raise "vpc for #{distrct_name} not found" unless r.first.vpcs.first
    vpc_id = r.first.vpcs.first.vpc_id

    r = vpc_client.describe_subnets(
      filters: [
        {
          name: "tag:barcelona",
          values: [district_name]
        },
        {
          name: "tag:Network",
          values: ["Private"]
        }

      ]
    )
    subnet_ids = r.first.subnets.map(&:subnet_id)
    subnet_cidrs = r.first.subnets.map(&:cidr_block)
    @network_attributes = {
      vpc_id: vpc_id,
      subnet_ids: subnet_ids,
      subnet_cidrs: subnet_cidrs
    }
  end

  def vpc_client
    @vpc_client ||= Aws::EC2::Client.new
  end

  def cf_client
    @cf_client ||= Aws::CloudFormation::Client.new
  end

  def ecs_client
    @ecs_client ||= Aws::ECS::Client.new
  end

  def ecr_client
    @ecr_client ||= Aws::ECR::Client.new
  end

  def iam_client
    @iam_client ||= Aws::IAM::Client.new
  end

  def wait_cf_stack(executor)
    while true
      sleep 10
      case executor.stack_status
      when "CREATE_COMPLETE"
        puts
        break
      when "UPDATE_COMPLETE"
        puts
        break
      when /_IN_PROGRESS/
        print "."
      else
        raise "Unexpected CF stack status #{executor.stack_status}"
      end
    end
  end

  def render_template(from, to, namespace={})
    erb = ERB.new(File.read(from))
    open(to, 'w') do |f|
      f << erb.result(OpenStruct.new(namespace).instance_eval{ binding })
    end
  end

  def get_repository_uri(name)
    r = ecr_client.describe_repositories(repository_names: [name])
    r.repositories.first.repository_uri
  end

  def any_stack_running?
    r = cf_client.describe_stacks
    raise "can't get stack status" unless r and r.stacks and r.stacks.size > 0
    r.stacks.any? do |s| 
      s.stack_status =~ /_IN_PROGRESS/
    end
  end

  def display_stacks_not_completed
    r = cf_client.describe_stacks
    raise "can't get stack status" unless r and r.stacks and r.stacks.size > 0
    r.stacks.each do |s| 
      next if s.stack_status =~ /COMPLETE/
      puts "#{s.stack_name} #{s.stack_status}"
    end
  end

  def wait_for_all_stacks_complete
    sleep 3
    puts "waiting for stacks..."
    display_stacks_not_completed
    while any_stack_running?
      print "."
      sleep 10
    end
    puts
  end

  def set_desired_count_of_all_service(count, config)
    district_name = config[:district_name]
    heritage_name = config[:heritage_name]
    service_names = [
      "#{district_name}-#{heritage_name}-web",
      "#{district_name}-#{heritage_name}-streaming", 
      "#{district_name}-#{heritage_name}-worker", 
    ]
    r = ecs_client.describe_services(cluster: district_name, services: service_names)
    r.services.each do |s| 
      ecs_client.update_service(service: s.service_name, desired_count: count)
    end
  end
end


class CLI < Thor
  include HelperMethods

  desc 'check_env', 'check environt for this command'

  option :region
  option :name, required: true
  option :district_name, required: true
  option :certificate_arn, required: true
  option :hostname, required: true
  option :endpoint, required: true

  desc 'config', 'Configure for later process'
  def config
    check_env
    Config.create(self, options)
  end

  desc 'create_db', 'Create RDB instance and S3 buckets for media files'
  def create_db
    config = Config.load(self)
    resources = Resources.load(self)
    district_name = config[:district_name]
    network_attributes = network_attributes(district_name)
    create_stack(Stack::DB, config, network_attributes, resources)
    resources.save
  end

  desc 'manage_aws_resources', 'Create or update AWS resources'
  def manage_aws_resources_db
    config = Config.load(self)
    resources = Resources.load(self)
    district_name = config[:district_name]
    network_attributes = network_attributes(district_name)
    create_stack(Stack::Resources, config, network_attributes, resources)
    resources.save
  end

  desc 'setup_ecs_cluster', 'Increase number of host instances'
  def setup_ecs_cluster
    config = Config.load(self)
    resources = Resources.load(self)
    attach_repository_policy_to_district(config, resources)

    district_name = config[:district_name]
    json = {
      instance_type: config[:ecs][:instance_type],
      cluster_size: config[:ecs][:cluster_size]
    }.to_json
    cmd("bcn api patch /districts/#{district_name} '#{json}' && bcn api post /districts/#{district_name}/apply_stack")
  end

  desc 'push_docker_image', 'Create and push the docker image for mastodon'
  def push_docker_image
    config = Config.load(self)
    resources = Resources.load(self)
    checkout_mastodon(config) unless File::directory?('mastodon')
    build_and_push_docker_image(config, resources)
  end

  desc 'create_heritage', 'Create a heritage for Mastodon'
  def create_heritage
    if any_stack_running? 
      display_stacks_not_completed
      say("can't execute this command until all stacks are completed")
      exit 1
    end
    config = Config.load(self)
    resources = Resources.load(self)

    install_barcelona_yml(config, resources)
    
    do_create_heritage(config, resources)
    set_desired_count_of_all_service(0, config) # Make service stacks terminate faster
    wait_for_all_stacks_complete

    do_set_environment_variables(config, resources)
    set_desired_count_of_all_service(0, config)
    wait_for_all_stacks_complete

    do_set_secret_environment_variables(config, resources)
    set_desired_count_of_all_service(0, config)
    wait_for_all_stacks_complete

    cmd("cd mastodon && bcn deploy -e production")
    set_desired_count_of_all_service(1, config)
    wait_for_all_stacks_complete

    resources.save
  end

  desc 'execute_all', 'allocate all resources'
  def execute_all
    puts "start"
    puts "end of allocate_resources"
  end

  private
  def check_env
    say "checking environment... "
    ret = check_bcn && check_aws_creadential
    exit(1) unless ret
    say "OK"
  end
  def region
    options[:region]
  end

  def district_name
    options[:district_name]
  end
end

CLI.start(ARGV)
